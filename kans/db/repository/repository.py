from __future__ import annotations
from typing import TYPE_CHECKING, Generic, Iterable, Protocol, TypeVar

T = TypeVar('T')
ID = TypeVar('ID', contravariant=True)

if TYPE_CHECKING:
    from decimal import Decimal
    from aiomysql import Connection
    from decimal import Decimal


class Repository(Protocol, Generic[T, ID]):
    """<<interface>>

    Generic[T, ID]
    """
    async def insert(self, entities: Iterable[T], conn: None | Connection = None) -> int: ...
    async def exists(self, id_: ID, conn: None | Connection = None) -> bool: ...
    async def count(self, conn: None | Connection = None) -> float: ...
    async def find_one(self, id_: ID, conn: None | Connection = None) -> None | T: ...
    async def find_all(self, conn: None | Connection = None) -> None | list[T]: ...
    async def update(self, entities: Iterable[T], conn: None | Connection = None) -> int: ...
    async def delete(self, id_: ID, conn: None | Connection = None) -> int: ...
    async def create_table(self, conn: None | Connection = None) -> None: ...
    async def table_size(self, conn: None | Connection = None) -> Decimal: ...
    @property
    def table_name(self) -> str: ...
