from typing import Generic, Protocol, TypeVar

ID = TypeVar('ID', contravariant=True)
T = TypeVar('T')


class Table(Generic[T, ID], Protocol):
    """<<interface>>

    Generic[T, ID]
    """
    async def insert(self, entity: T) -> bool: ...
    async def exists(self, id: ID) -> bool: ...
    async def count(self) -> float: ...
    async def find_one(self, id: ID) -> None | T: ...
    async def find_all(self) -> None | list[T]: ...
    async def update(self, entity: T) -> bool: ...
    async def delete(self, id: ID) -> bool: ...
    async def create_table(self) -> None: ...
    @property
    def table_name(self) -> str: ...
