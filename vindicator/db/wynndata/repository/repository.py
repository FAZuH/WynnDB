from __future__ import annotations
from typing import TYPE_CHECKING, Iterable, Protocol, TypeVar

ID_contra = TypeVar('ID_contra', contravariant=True)
T = TypeVar('T')

if TYPE_CHECKING:
    from aiomysql import Connection


class Table(Protocol[T, ID_contra]):
    """<<interface>>

    Generic[T, ID]
    """
    async def insert(self, connection: None | Connection, entity: Iterable[T]) -> bool: ...
    async def exists(self, id_: ID_contra) -> bool: ...
    async def count(self) -> float: ...
    async def find_one(self, id_: ID_contra) -> None | T: ...
    async def find_all(self) -> None | list[T]: ...
    async def update(self, entity: Iterable[T]) -> bool: ...
    async def delete(self, id_: ID_contra) -> bool: ...
    async def create_table(self) -> None: ...
    @property
    def table_name(self) -> str: ...
